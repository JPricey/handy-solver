fn model_url(matchup: Matchup) -> String {
    let base_url = window().unwrap().location();
    let origin_url = base_url.origin().unwrap();
    format!(
        "{}/static/models/{:?}.{:?}.yaml",
        origin_url, matchup.0, matchup.1
    )
}

async fn fetch_model_from_full_url(url: &str) -> Result<Model, ()> {
    log!("Fetching model: {}", url);
    let model_string = reqwasm::http::Request::get(url)
        .send()
        .await
        .unwrap()
        .text()
        .await
        .unwrap();

    let model: Model = serde_yaml::from_str(&model_string).unwrap();
    Ok(model)
}

    let (bridge_sink, mut bridge_stream) = SolverWorker::spawner().spawn("/worker.js").split();
    let bridge_sink = Rc::new(RefCell::new(bridge_sink));

        let final_piles = find_final_piles_matching_prefix(&future_states, &event_prefixes);
        let pile_strings: Vec<_> = final_piles.iter().map(|p| format!("{:?}", p)).collect();
        spawn_local(async move {
            loop {
                if let Ok(mut bridge_sink) = ccc.try_borrow_mut() {
                    bridge_sink
                        .send(ControlSignal::SetRootPiles(pile_strings))
                        .await
                        .unwrap();
                    break;
                }
            }
        });


    let bsc3 = bridge_sink.clone();
    spawn_local(async move {
        let matchup = try_get_matchup_from_pile(&init_pile).unwrap();
        let model_url = model_url(matchup);
        let model = fetch_model_from_full_url(&model_url).await.unwrap();

        loop {
            if let Ok(mut bridge_sink) = bsc3.try_borrow_mut() {
                bridge_sink
                    .send(ControlSignal::SetModel(model))
                    .await
                    .unwrap();
                break;
            }
        }
    });

    spawn_local(async move {
        while let Some(pile_str) = bridge_stream.next().await {
            let pile = string_to_pile(&pile_str);

            let future_states = final_state_resolutions.get();
            let event_prefixes = events_getter.get();
            let event = find_next_event_matching_prefix_and_with_final_state(
                &future_states,
                &event_prefixes,
                &pile,
            );
            log!("Computer rec: {:?}", event)
        }
    });

